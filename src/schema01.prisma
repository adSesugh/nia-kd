// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  regId           String    @unique
  role            String    @default("MEMBER") @db.VarChar(191)
  password        String    @db.VarChar(191)
  rememberMe      Boolean   @default(false)
  emailVerifiedAt DateTime?
  emailVerifToken String?   @db.VarChar(191)
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  member          Member?
  events          Event[]
  Blog            Blog[]

  @@map("users")
}

model Member {
  id          String    @id @default(uuid())
  regId       String
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  photoURL    String?
  address     String?   @db.VarChar(191)
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  joined      DateTime?
  memberType  String    @default("STUDENT") @db.VarChar(191)
  status      String    @default("ACTIVE") @db.VarChar(191)
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@unique([regId, email, phoneNumber])
  @@map("members")
}

model Event {
  id           String     @id @default(uuid())
  title        String     @db.VarChar(191)
  description  String     @db.Text
  locationType String     @default("IN PERSON") @db.VarChar(191)
  lat          Decimal
  lng          Decimal
  eventType    String     @default("SINGLE") @db.VarChar(191)
  startAt      DateTime?
  startAtTime  DateTime   @db.Time()
  endAt        DateTime?
  endAtTime    DateTime   @db.Time()
  ticketType   String     @default("FREE") @db.VarChar(191)
  seats        Int?       @default(0)
  isInfinity   Boolean    @default(false)
  coverPhoto   String     @db.VarChar(191)
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?
  formTitle    String
  instructions String?
  eventForm    EventForm?
  mailFormat   String?    @db.Text
  mailTicket   Boolean    @default(false)
  ticketCharge Decimal    @default(0.0)
  status       String     @default("DRAFT") @db.VarChar(191)
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")

  @@unique([title, formTitle])
  @@map("events")
}

model EventForm {
  id String @id @default(uuid())

  eventId String  @unique
  event   Event?  @relation(fields: [eventId], references: [id])
  name    String
  status  Boolean @default(true)

  @@map("event_forms")
}

model EventRegistration {
  id         String   @id @default(uuid())
  registrant Json
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map("event_registrations")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("tags")
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  summary   String   @db.Text
  image     String
  tags      Tag[]
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("blogs")
}

model MediaLibrary {
  id      String @id @default(uuid())
  url     String @db.VarChar(191)
  imgType String @db.VarChar(191)

  @@map("media_library")
}
