// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Counter {
  id     String @id @default(uuid())
  name   String @unique @db.VarChar(20)
  number Int

  @@map("counters")
}

model User {
  id               String    @id @default(uuid())
  regId            String?   @unique
  role             String    @default("MEMBER") @db.VarChar(191)
  password         String    @db.VarChar(191)
  email            String?   @unique @db.VarChar(50)
  rememberMe       Boolean   @default(false)
  emailVerifiedAt  DateTime?
  emailVerifyToken String?   @db.VarChar(191)
  member           Member?
  dues             Dues[]
  status           String    @default("Active")
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @updatedAt @map(name: "updated_at")
  Blog             Blog[]
  Event            Event[]

  @@map("users")
}

model Member {
  id                String              @id @default(uuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id])
  regId             String              @unique
  firstName         String
  lastName          String
  email             String              @unique
  phoneNumber       String              @unique
  photoURL          String?
  address           String?             @db.VarChar(191)
  joined            DateTime?
  membershipId      String?             @unique
  membershipType    String              @default("Student") @db.VarChar(191)
  status            String              @default("Active") @db.VarChar(191)
  createdAt         DateTime            @default(now()) @map(name: "created_at")
  updatedAt         DateTime            @updatedAt @map(name: "updated_at")
  payments          Payment[]
  EventRegistration EventRegistration[]

  @@map("members")
}

model Dues {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(191)
  amount    Decimal   @default(0.00)
  startsAt  DateTime  @map(name: "starts_at")
  endsAt    DateTime  @map(name: "ends_at")
  status    String    @default("Active")
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  payments  Payment[]

  @@map("dues")
}

model Payment {
  id         String   @id @default(uuid())
  memberId   String
  member     Member   @relation(fields: [memberId], references: [id])
  duesId     String
  due        Dues     @relation(fields: [duesId], references: [id])
  paymentRef String   @unique
  amount     Decimal  @default(0.00)
  status     String   @default("Successful") @db.VarChar(15)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map("payments")
}

model Blog {
  id            String @id @default(uuid())
  title         String @db.VarChar(150)
  content       String @db.LongText
  summary       String @db.VarChar(250)
  featuredImage String @db.VarChar(191)
  status        String @default("Draft")
  userId        String @default("34fa0d5e-8549-4385-8cca-0d83ac94bbcd")
  user          User   @relation(fields: [userId], references: [id])

  tags      TagOnPosts[]
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map("blogs")
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  blogs     TagOnPosts[]
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map("tags")
}

model TagOnPosts {
  blog   Blog   @relation(fields: [blogId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blogId String
  tagId  String

  @@id([blogId, tagId])
}

model Event {
  id                 String              @id @default(uuid())
  name               String
  description        String              @db.Text
  type               String
  link               String?
  address            String?
  starts_at          DateTime
  ends_at            DateTime
  paymentType        String              @default("Free")
  amount             Decimal             @default(0.00)
  tickets            Int
  isInfinity         Boolean
  coverPhoto         String
  userId             String
  formTitle          String?
  instructions       String?             @db.MediumText
  message            String?             @db.MediumText
  status             String              @default("Active")
  user               User                @relation(fields: [userId], references: [id])
  eventForms         EventForm[]
  eventPayments      EventPayment[]
  createdAt          DateTime            @default(now()) @map(name: "created_at")
  updatedAt          DateTime            @updatedAt @map(name: "updated_at")
  eventRegistrations EventRegistration[]
  eventResources     EventResource[]

  @@map("events")
}

model EventForm {
  id        String   @id @default(uuid())
  name      String   @unique
  type      String
  required  Boolean
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("event_forms")
}

model FormDesign {
  id       String  @id @default(uuid())
  name     String  @unique
  type     String
  required Boolean

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("form_designs")
}

model EventPayment {
  id          String   @id @default(uuid())
  phoneNumber String
  paymentRef  String   @unique
  amount      Decimal  @default(0.00)
  status      String   @default("Successful") @db.VarChar(15)
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  @@map("event_payments")
}

model EventResource {
  id          String @id @default(uuid())
  resourceUrl String
  eventId     String
  event       Event  @relation(fields: [eventId], references: [id])

  @@map("event_resources")
}

model EventRegistration {
  id               String  @id @default(uuid())
  memberId         String?
  member           Member? @relation(fields: [memberId], references: [id])
  eventId          String
  event            Event   @relation(fields: [eventId], references: [id])
  registrantDetail Json
  amount           Decimal @default(0.00)
  paymentRef       String  @unique
  status           String  @default("Successful") @db.VarChar(15)
  checkin          Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("event_registrations")
}
