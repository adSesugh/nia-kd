// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Counter {
  id     String @id @default(uuid())
  name   String @unique @db.VarChar(20)
  number Int

  @@map("counters")
}

model User {
  id               String    @id @default(uuid())
  regId            String?   @unique
  role             String    @default("MEMBER") @db.VarChar(191)
  password         String    @db.VarChar(191)
  email            String?   @unique @db.VarChar(50)
  rememberMe       Boolean   @default(false)
  emailVerifiedAt  DateTime?
  emailVerifyToken String?   @db.VarChar(191)
  member           Member?
  dues             Dues[]
  status           String    @default("Active")
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Member {
  id             String    @id @default(uuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  regId          String    @unique
  firstName      String
  lastName       String
  email          String    @unique
  phoneNumber    String    @unique
  photoURL       String?
  address        String?   @db.VarChar(191)
  joined         DateTime?
  membershipId   String?   @unique
  membershipType String    @default("Student") @db.VarChar(191)
  status         String    @default("Active") @db.VarChar(191)
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @updatedAt @map(name: "updated_at")
  payments       Payment[]

  @@map("members")
}

model Dues {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(191)
  amount    Decimal   @default(0.00)
  startsAt  DateTime  @map(name: "starts_at")
  endsAt    DateTime  @map(name: "ends_at")
  status    String    @default("Active")
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  payments  Payment[]

  @@map("dues")
}

model Payment {
  id         String   @id @default(uuid())
  memberId   String
  member     Member   @relation(fields: [memberId], references: [id])
  duesId     String
  due        Dues     @relation(fields: [duesId], references: [id])
  paymentRef String   @unique
  amount     Decimal  @default(0.00)
  status     String   @default("Successful") @db.VarChar(15)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@map("payments")
}

model Blog {
  id            String @id @default(cuid())
  title         String @db.VarChar(150)
  content       String @db.LongText
  summary       String @db.VarChar(250)
  featuredImage String @db.VarChar(191)

  tags      Tag[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("blogs")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("tags")
}

// model MediaLibrary {
//   id        String   @id @default(uuid())
//   url       String   @db.VarChar(191)
//   imgType   String   @db.VarChar(191)
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @updatedAt @map(name: "updated_at")

//   @@map("media_library")
// }
