// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Counter {
  id     String @id @default(uuid())
  name   String @unique @db.VarChar(20)
  number Int

  @@map("counters")
}

model User {
  id               String    @id @default(uuid())
  regId            String?   @unique
  role             String    @default("MEMBER") @db.VarChar(191)
  password         String    @db.VarChar(191)
  email            String?   @unique @db.VarChar(50)
  rememberMe       Boolean   @default(false)
  emailVerifiedAt  DateTime?
  emailVerifyToken String?   @db.VarChar(191)
  member           Member?
  dues             Dues[]
  status           String    @default("Active")
  Blog             Blog[]
  Event            Event[]
  resources        Resource[]

  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @updatedAt @map(name: "updated_at")

  @@map("users")
}

model MembershipType {
  id        String @id @default(uuid())
  name      String @unique @db.VarChar(30) 
  members   Member[]
  dues      Dues[]
}

model Member {
  id                  String              @id @default(uuid())
  userId              String              @unique
  user                User                @relation(fields: [userId], references: [id])
  regId               String              @unique
  firstName           String
  lastName            String
  email               String              @unique
  phoneNumber         String              @unique
  photoURL            String?
  address             String?             @db.VarChar(191)
  joined              DateTime?
  membershipId        String?             @unique
  membershipTypeId    String
  membershipType      MembershipType     @relation(fields: [membershipTypeId], references: [id])
  status              String              @default("Active") @db.VarChar(191)
  //cpdpPoints        Int                 @default(0)
  createdAt           DateTime            @default(now()) @map(name: "created_at")
  updatedAt           DateTime            @updatedAt @map(name: "updated_at")
  payments            Payment[]
  EventRegistration   EventRegistration[]

  cpdpPoints         CpdpPoint[]

  @@map("members")
}

model Dues {
  id                String          @id @default(uuid())
  name              String          @db.VarChar(191)
  amount            Decimal         @default(0.00)
  startsAt          DateTime        @map(name: "starts_at")
  endsAt            DateTime        @map(name: "ends_at")
  status            String          @default("Active")
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  membershipTypeId  String
  membershipType    MembershipType @relation(fields: [membershipTypeId], references: [id])
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @updatedAt @map(name: "updated_at")
  deletedAt         DateTime?
  payments          Payment[]

  @@map("dues")
}

model Blog {
  id            String @id @default(uuid())
  title         String @db.VarChar(150)
  content       String @db.LongText
  summary       String @db.VarChar(250)
  featuredImage String @db.VarChar(191)
  status        String @default("Draft")
  userId        String?
  user          User?   @relation(fields: [userId], references: [id])

  tags      TagOnPosts[]
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map("blogs")
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  blogs     TagOnPosts[]
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")

  @@map("tags")
}

model TagOnPosts {
  blog   Blog   @relation(fields: [blogId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blogId String
  tagId  String

  @@id([blogId, tagId])
}

model Event {
  id                 String              @id @default(uuid())
  name               String
  description        String              @db.Text
  type               String
  cpdp_points        Int                 @default(0)
  link               String?
  address            String?
  starts_at          DateTime
  starts_time        String              @default("00:00:00")
  ends_at            DateTime
  ends_time          String              @default("00:00:00")
  paymentType        String              @default("Free")
  amount             Decimal             @default(0.00)
  tickets            Int                 @default(0)
  isInfinity         Boolean
  coverPhoto         String?
  formTitle          String?
  instructions       String?             @db.MediumText
  message            String?             @db.MediumText
  status             String              @default("Published")
  certificate        String?
  hasCertificate     Boolean             @default(false)
  views              Int                 @default(0)
  userId             String?
  user               User?                @relation(fields: [userId], references: [id])
  eventForms         EventForm[]
  eventPayments      Payment[]
  eventRegistrations EventRegistration[]
  eventResources     EventResource[]
  speakers           Speaker[]
  sponsors           Sponsor[]
  sendTag            Boolean             @default(false)

  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  deletedAt          DateTime?

  @@map("events")
}

model EventForm {
  id        String   @id @default(uuid())
  name      String   @unique
  label     String
  type      String
  required  Boolean
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("event_forms")
}

model FormDesign {
  id       String  @id @default(uuid())
  name     String  @unique
  label    String?
  type     String
  required Boolean

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("form_designs")
}

model EventResource {
  id          String @id @default(uuid())
  resourceUrl String
  name        String @default("Outline")
  eventId     String?
  event       Event?  @relation(fields: [eventId], references: [id])

  @@map("event_resources")
}

model EventRegistration {
  id               String   @id @default(uuid())
  memberId         String?
  member           Member?  @relation(fields: [memberId], references: [id])
  eventId          String?
  event            Event?   @relation(fields: [eventId], references: [id])
  registrantDetail Json
  checkin          Boolean  @default(false)
  checkinDate      DateTime? @map(name: "checkin_date")
  payment          Payment?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("event_registrations")
}

model Speaker {
  id      String @id @default(uuid())
  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id])
  name    String
  title   String
  about   String
  avatar  String
}

model Sponsor {
  id      String @id @default(uuid())
  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id])
  logo    String
}

model CpdpPoint {
  id        String @id @default(uuid())
  eventId   String?
  memberId  String?
  member    Member? @relation(fields: [memberId], references: [id])
  points    Int

  @@map("cpdp_points")
}

model Payment {
  id                    String   @id @default(uuid())
  paymentType           String
  memberId              String?
  member                Member?   @relation(fields: [memberId], references: [id])
  duesId                String?
  due                   Dues?     @relation(fields: [duesId], references: [id])
  eventId               String?
  event                 Event?   @relation(fields: [eventId], references: [id])
  eventRegistrationId   String?  @unique
  eventRegistration     EventRegistration? @relation(fields: [eventRegistrationId], references: [id])
  phoneNumber           String
  description           String   @db.Text
  paymentRef            String
  amount                Decimal  @default(0.00)
  status                String   @default("Successful") @db.VarChar(15)
  createdAt             DateTime @default(now()) @map(name: "created_at")
  updatedAt             DateTime @updatedAt @map(name: "updated_at")

  @@map("payments")
}

model Resource {
  id            String @id @default(uuid())
  name          String
  resourcePath  String
  userId        String?
  user User?    @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  @@map("resources")
}